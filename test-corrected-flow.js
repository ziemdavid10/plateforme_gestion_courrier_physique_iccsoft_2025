const axios = require('axios');

async function testCorrectedFlow() {
    console.log('üîß Test du flux corrig√©\n');

    const AUTH_URL = 'http://localhost:8081/v1/api/auth';
    const USER_URL = 'http://localhost:8083/v2/user';
    
    try {
        // 1. Connexion Admin
        console.log('1Ô∏è‚É£ Connexion Admin...');
        const adminLogin = await axios.post(`${AUTH_URL}/signin`, {
            username: 'admin',
            password: 'admin123'
        });
        console.log('‚úÖ Admin connect√©');

        // 2. Cr√©ation utilisateur
        console.log('\n2Ô∏è‚É£ Cr√©ation utilisateur...');
        const timestamp = Date.now().toString().slice(-6);
        const newUser = {
            username: `test${timestamp}`,
            name: 'Test User',
            email: `test${timestamp}@test.com`,
            password: 'test123',
            role: 'EMPLOYE',
            department: 'DIRECTION_TECHNIQUE',
            entreprise: 'ICCSOFT',
            fonction: 'INGENIEUR_DEVELOPPEUR'
        };

        const createResponse = await axios.post(USER_URL, newUser);
        console.log('‚úÖ Utilisateur cr√©√©:', createResponse.data.username);

        // 3. V√©rification endpoint username
        console.log('\n3Ô∏è‚É£ Test endpoint username...');
        const userByUsername = await axios.get(`${USER_URL}/username/${newUser.username}`);
        console.log('‚úÖ Utilisateur trouv√© par username:', userByUsername.data.username);

        // 4. Test connexion
        console.log('\n4Ô∏è‚É£ Test connexion utilisateur...');
        const userLogin = await axios.post(`${AUTH_URL}/signin`, {
            username: newUser.username,
            password: 'test123'
        });

        if (userLogin.data.accessToken) {
            console.log('‚úÖ Connexion r√©ussie!');
            
            const profile = await axios.get(`${AUTH_URL}/me`, {
                headers: { Authorization: `Bearer ${userLogin.data.accessToken}` }
            });
            
            console.log('‚úÖ Profil:', profile.data.username, '-', profile.data.role);
        }

        // 5. Nettoyage
        await axios.delete(`${USER_URL}/${createResponse.data.id}`);
        console.log('\nüßπ Nettoyage effectu√©');
        
        console.log('\nüéâ FLUX CORRIG√â FONCTIONNE!');

    } catch (error) {
        console.error('‚ùå Erreur:', error.response?.data || error.message);
    }
}

testCorrectedFlow();